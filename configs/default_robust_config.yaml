# Copyright (c) Anish Acharya.
# Licensed under the MIT License
{
  "seed": 1,
  "data_config":
  {
    "data_set": "fashion_mnist",
    "shape":[28,28],
    "num_labels": 10,                 # Num of Labels in Dataset
    "num_channels": 1,                # Number of channels # in case of CV experiments

    "train_batch_size": 32,           # Mini Batch Size
    "num_clients": 8,               # Number of mini-batches

    "test_batch_size": 2048,          # Test Batch Size
  },

  "training_config":
  {
    "global_epochs": 10,                 # epochs

    "optimizer_config":
      {
        "loss": "ce",   # Contrastive Loss
        "loss_sampler": "top_loss",
        "init_sampling_frac": 0.1,

        "optimizer": "Adam",
        "lr0": 0.002,
        "momentum": 0.9,
        "reg": 0.00001,
        "nesterov": true,
        "amsgrad": false
      },

    "lrs_config":
      {
        "lrs": "step",
        "milestones": [1,5,10],
        "step_size": 1,
        "gamma": 0.9
      },
    "learner_config":
      {
        "net": "lenet",
      },
    "aggregation_config":
      {
        "gar": "mean",
        "geo_med_config": { "alg": 'vardi', 'eps': 0.00001, 'max_iter': 100 },
        "trimmed_mean_config": { "proportion": 0.3 },
        "krum_config": { "krum_frac": 0.3 },
        "norm_clip_config": { "alpha": 0.5 },

        "grad_attack_config":
          {
            "attack_model": 'additive',  # 'additive' , 'impulse', 'backdoor'
            "attack_mode": "un_coordinated",
            "frac_adv": 0.4,
            "rand_additive_attack_conf":
              {
                "noise_dist": "gaussian",
                "mean_shift": 0, "attack_std": 10,   # Gaussian noise
                "noise_range": [ -1, 0 ],             # Uniform noise
              },
            "sign_flip_conf": { "flip_prob": 0.7, "flip_scale": 5 },
            "attack_n_std": 1
          },

        "jacobian_compression_config":
          {
            "rule": null,                     # None, 'active_norm_sampling', 'random_sampling'
            "axis": "dim",                    # n = client/sample/batch selection ; dim = dimension selection
            "sampling_fraction": 0.3,         # fraction to be sampled
            "memory_algo": null,              # memory in Jacobian - invoked for jacobian compression rules
          }
      }
  },
}